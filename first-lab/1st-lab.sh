#!/bin/bash 
#это шебанг, тут указываем путь к оболочке которой мы должны скормить данный код

RAND_MAX=32767 #задаем максимальное значение которое может принять системная переменная 
#$RANDOM, которая генерирует случайное число от 0 до 32767

random_in_range () {
	local R=$1 #создаем локальную переменную радиуса, которой присваевается значение первого аргумента переданного в данную функци
	echo $(bc <<< "scale=5; $R * ( $RANDOM / $RAND_MAX )")  #bc - basic calculator, утилита линукс представляющая из себя калькулятор
	#тут я передаю в утилиту в качестве входных данных строку "scale=5; $R * ( $RANDOM / $RAND_MAX) "
	#с помощью оператора <<< который создает временный файл в который записывает нашу строку, после чего утилита считывает этот файл
	#и использует данные из него как входные
	#scale=5 - количество знаков после запятой, $R * ( $RANDOM / $RAND_MAX) - генерация случайного значения от 0 до R
}

calc_pi () {
	local R=$1 #создаем локальную переменную радиуса, которой присваевается значение первой переменной переданной в функцию
	local N=$2 #создаем локальную переменную количества бросков
	local hits=0 #создаем локальную переменную количества попаданий

	for((i=0; i<=N; i++))
	do
		x=$(random_in_range "$R") #создаем переменную x в которую записываем случайное значение полученное из функции random_in_range
		y=$(random_in_range "$R") #создаем переменную y в которую записываем случайное значение полученное из функции random_in_range
	
		dist=$(bc <<< "scale=5; ($x^2 + $y^2) <= $R^2") #переменная в которой проверяем попали ли координаты или нет
		if [[ "$dist" = 1 ]]   # проверка
		then
			hits=$(( $hits + 1 ))
		fi
	done

	pi_estimate=$(bc <<< "scale=5; 4 * $hits / $N") #оценка ПИ
	echo "the estimate of pi number: $pi_estimate" #выводим оценку
}

throws=(10 100 1000 10000) #создаем массив в который закидываем количество бросков
radius=1 #радиус
total_exec_time=0 #переменная для подсчета общего времени исполнения скрипта

for N in "${throws[@]}" #foreach цикл, синтаксическая конструкция ${throws[@]} разворачивается во все значения которые есть в массиве throws
do
	echo "Number of throws: $N" >> output.txt #выводим в файл
	for j in {1..5} #foreach цикл, {1..5..increment} - разворачивается в последовательность 1 2 3 4 5, тк инкремент не указан он по умолчанию 1
	do
		start_time=$(date +%s%N) #время начала работы
		calc_pi "$radius" "$N" >> output.txt #записываем результат в файл
		end_time=$(date +%s%N) #время конца работы

		duration=$(( end_time - start_time )) #время работы
		total_exec_time=$(( $total_exec_time + $duration )) #общее время работы
		echo "Execution time for $N throws $j: $(( $duration / 1000000000 )) sec, $(( ($duration / 1000000) % 1000 )) ms" >> exec-time.txt 
		#время работы записываем в файл
	done
	echo
done

echo "Total exectuion time: $(( $total_exec_time / 1000000000 )) sec, $(( ($total_exec_time / 1000000) % 1000 )) ms"
